name: Run Benchmarks

# Run this action when triggered manually through GitHub UI.
on: [workflow_dispatch]

jobs:

  chc-comp-benchmark:
    needs: [build-loat-binary]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ci_index: [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]
        ci_total: [20]
        include:
          - repo: 'chc-comp22-benchmarks'
            directory: 'LIA-Lin'
            mode: reachability
            engine: adcl
            format: horn

          - repo: 'chc-comp23-benchmarks'
            directory: 'LIA-lin'
            mode: reachability
            engine: adcl
            format: horn
    steps:
      - name: Checkout Benchmark Repository
        uses: actions/checkout@v4
        with:
          repository: chc-comp/${{ matrix.repo }}
          sparse-checkout: ${{ matrix.directory }}

      - name: Unpack
        run: gunzip ${{ matrix.directory }}/*.gz

      # retrieve previously built binary
      - name: Import LoAT Binary
        uses: actions/download-artifact@master
        with:
          name: loat-static
          path: /usr/local/bin/
     
      - name: Run Benchmark
        run: |
          # permissions are not preserved for artifacts:
          chmod +x /usr/local/bin/loat-static

          cd ${{ matrix.directory }}

          let i=0
          for filename in *.smt2; do
            # if [[ $(($i % $CI_TOTAL)) -eq $CI_INDEX ]]; then
            if [[ 0 -eq 0 ]]; then
              # printf "running ${filename} ... "
              # start=`date +%s`

              # set +e
              # result=$(timeout 20 loat-static --mode ${{ matrix.mode }} --format ${{ matrix.format }} --proof-level 0 --engine ${{ matrix.engine }} "${filename}")
              # exit_status=$?
              # set -e

              # end=`date +%s`
              # runtime=$((end-start))

              # if [[ $exit_status -eq 0 ]]; then
              #   result=$(echo "$result" | head -n 1)
              # elif [[ $exit_status -eq 124 ]]; then
              #   result="timeout"
              # else
              #   result="error"
              # fi

              # printf "${result} after ${runtime}s\n"
            fi
            let i++
          done
        env:
          CI_TOTAL: ${{ matrix.ci_total }}
          CI_INDEX: ${{ matrix.ci_index }}
