
// Generated from CINT.g4 by ANTLR 4.11.1


#include "CINTLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct CINTLexerStaticData final {
  CINTLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  CINTLexerStaticData(const CINTLexerStaticData&) = delete;
  CINTLexerStaticData(CINTLexerStaticData&&) = delete;
  CINTLexerStaticData& operator=(const CINTLexerStaticData&) = delete;
  CINTLexerStaticData& operator=(CINTLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag cintlexerLexerOnceFlag;
CINTLexerStaticData *cintlexerLexerStaticData = nullptr;

void cintlexerLexerInitialize() {
  assert(cintlexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<CINTLexerStaticData>(
    std::vector<std::string>{
      "INT", "IF", "WHILE", "ELSE", "TERMINATOR", "OPENP", "CLOSEP", "OPENC", 
      "CLOSEC", "MULT", "MINUS", "PLUS", "LT", "LEQ", "EQ", "NEQ", "GEQ", 
      "GT", "ASSIGN", "NONDETNAME", "OR", "AND", "NOT", "TRUE", "FALSE", 
      "TYPEDEF", "ENUM", "COMMA", "BOOL", "EXTERN", "VOID", "MAIN", "RETURN", 
      "ZERO", "POS", "NONZERO", "DIGIT", "V", "ALPHANUM", "CHAR", "LOW", 
      "UP", "W", "BLOCKCOMMENT", "LINECOMMENT"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'int'", "'if'", "'while'", "'else'", "';'", "'('", "')'", "'{'", 
      "'}'", "'*'", "'-'", "'+'", "'<'", "'<='", "'=='", "'!='", "'>='", 
      "'>'", "'='", "'__VERIFIER_nondet_int'", "'||'", "'&&'", "'!'", "'true'", 
      "'false'", "'typedef'", "'enum'", "','", "'bool'", "'extern'", "'void'", 
      "'main'", "'return'", "'0'"
    },
    std::vector<std::string>{
      "", "INT", "IF", "WHILE", "ELSE", "TERMINATOR", "OPENP", "CLOSEP", 
      "OPENC", "CLOSEC", "MULT", "MINUS", "PLUS", "LT", "LEQ", "EQ", "NEQ", 
      "GEQ", "GT", "ASSIGN", "NONDETNAME", "OR", "AND", "NOT", "TRUE", "FALSE", 
      "TYPEDEF", "ENUM", "COMMA", "BOOL", "EXTERN", "VOID", "MAIN", "RETURN", 
      "ZERO", "POS", "V", "W", "BLOCKCOMMENT", "LINECOMMENT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,39,294,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,
  	1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,
  	9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,
  	1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,19,1,19,
  	1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
  	1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,23,
  	1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,
  	1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,28,1,28,
  	1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,31,1,31,
  	1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,34,1,34,
  	5,34,233,8,34,10,34,12,34,236,9,34,1,35,1,35,1,36,1,36,3,36,242,8,36,
  	1,37,1,37,5,37,246,8,37,10,37,12,37,249,9,37,1,38,1,38,3,38,253,8,38,
  	1,39,1,39,3,39,257,8,39,1,40,1,40,1,41,1,41,1,42,4,42,264,8,42,11,42,
  	12,42,265,1,42,1,42,1,43,1,43,1,43,1,43,5,43,274,8,43,10,43,12,43,277,
  	9,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,5,44,288,8,44,10,44,
  	12,44,291,9,44,1,44,1,44,1,275,0,45,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
  	8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
  	20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
  	63,32,65,33,67,34,69,35,71,0,73,0,75,36,77,0,79,0,81,0,83,0,85,37,87,
  	38,89,39,1,0,2,3,0,9,10,13,13,32,32,2,0,10,10,13,13,295,0,1,1,0,0,0,0,
  	3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
  	0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
  	25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
  	0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
  	0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,
  	57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,
  	0,0,0,0,69,1,0,0,0,0,75,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,
  	0,1,91,1,0,0,0,3,95,1,0,0,0,5,98,1,0,0,0,7,104,1,0,0,0,9,109,1,0,0,0,
  	11,111,1,0,0,0,13,113,1,0,0,0,15,115,1,0,0,0,17,117,1,0,0,0,19,119,1,
  	0,0,0,21,121,1,0,0,0,23,123,1,0,0,0,25,125,1,0,0,0,27,127,1,0,0,0,29,
  	130,1,0,0,0,31,133,1,0,0,0,33,136,1,0,0,0,35,139,1,0,0,0,37,141,1,0,0,
  	0,39,143,1,0,0,0,41,165,1,0,0,0,43,168,1,0,0,0,45,171,1,0,0,0,47,173,
  	1,0,0,0,49,178,1,0,0,0,51,184,1,0,0,0,53,192,1,0,0,0,55,197,1,0,0,0,57,
  	199,1,0,0,0,59,204,1,0,0,0,61,211,1,0,0,0,63,216,1,0,0,0,65,221,1,0,0,
  	0,67,228,1,0,0,0,69,230,1,0,0,0,71,237,1,0,0,0,73,241,1,0,0,0,75,243,
  	1,0,0,0,77,252,1,0,0,0,79,256,1,0,0,0,81,258,1,0,0,0,83,260,1,0,0,0,85,
  	263,1,0,0,0,87,269,1,0,0,0,89,283,1,0,0,0,91,92,5,105,0,0,92,93,5,110,
  	0,0,93,94,5,116,0,0,94,2,1,0,0,0,95,96,5,105,0,0,96,97,5,102,0,0,97,4,
  	1,0,0,0,98,99,5,119,0,0,99,100,5,104,0,0,100,101,5,105,0,0,101,102,5,
  	108,0,0,102,103,5,101,0,0,103,6,1,0,0,0,104,105,5,101,0,0,105,106,5,108,
  	0,0,106,107,5,115,0,0,107,108,5,101,0,0,108,8,1,0,0,0,109,110,5,59,0,
  	0,110,10,1,0,0,0,111,112,5,40,0,0,112,12,1,0,0,0,113,114,5,41,0,0,114,
  	14,1,0,0,0,115,116,5,123,0,0,116,16,1,0,0,0,117,118,5,125,0,0,118,18,
  	1,0,0,0,119,120,5,42,0,0,120,20,1,0,0,0,121,122,5,45,0,0,122,22,1,0,0,
  	0,123,124,5,43,0,0,124,24,1,0,0,0,125,126,5,60,0,0,126,26,1,0,0,0,127,
  	128,5,60,0,0,128,129,5,61,0,0,129,28,1,0,0,0,130,131,5,61,0,0,131,132,
  	5,61,0,0,132,30,1,0,0,0,133,134,5,33,0,0,134,135,5,61,0,0,135,32,1,0,
  	0,0,136,137,5,62,0,0,137,138,5,61,0,0,138,34,1,0,0,0,139,140,5,62,0,0,
  	140,36,1,0,0,0,141,142,5,61,0,0,142,38,1,0,0,0,143,144,5,95,0,0,144,145,
  	5,95,0,0,145,146,5,86,0,0,146,147,5,69,0,0,147,148,5,82,0,0,148,149,5,
  	73,0,0,149,150,5,70,0,0,150,151,5,73,0,0,151,152,5,69,0,0,152,153,5,82,
  	0,0,153,154,5,95,0,0,154,155,5,110,0,0,155,156,5,111,0,0,156,157,5,110,
  	0,0,157,158,5,100,0,0,158,159,5,101,0,0,159,160,5,116,0,0,160,161,5,95,
  	0,0,161,162,5,105,0,0,162,163,5,110,0,0,163,164,5,116,0,0,164,40,1,0,
  	0,0,165,166,5,124,0,0,166,167,5,124,0,0,167,42,1,0,0,0,168,169,5,38,0,
  	0,169,170,5,38,0,0,170,44,1,0,0,0,171,172,5,33,0,0,172,46,1,0,0,0,173,
  	174,5,116,0,0,174,175,5,114,0,0,175,176,5,117,0,0,176,177,5,101,0,0,177,
  	48,1,0,0,0,178,179,5,102,0,0,179,180,5,97,0,0,180,181,5,108,0,0,181,182,
  	5,115,0,0,182,183,5,101,0,0,183,50,1,0,0,0,184,185,5,116,0,0,185,186,
  	5,121,0,0,186,187,5,112,0,0,187,188,5,101,0,0,188,189,5,100,0,0,189,190,
  	5,101,0,0,190,191,5,102,0,0,191,52,1,0,0,0,192,193,5,101,0,0,193,194,
  	5,110,0,0,194,195,5,117,0,0,195,196,5,109,0,0,196,54,1,0,0,0,197,198,
  	5,44,0,0,198,56,1,0,0,0,199,200,5,98,0,0,200,201,5,111,0,0,201,202,5,
  	111,0,0,202,203,5,108,0,0,203,58,1,0,0,0,204,205,5,101,0,0,205,206,5,
  	120,0,0,206,207,5,116,0,0,207,208,5,101,0,0,208,209,5,114,0,0,209,210,
  	5,110,0,0,210,60,1,0,0,0,211,212,5,118,0,0,212,213,5,111,0,0,213,214,
  	5,105,0,0,214,215,5,100,0,0,215,62,1,0,0,0,216,217,5,109,0,0,217,218,
  	5,97,0,0,218,219,5,105,0,0,219,220,5,110,0,0,220,64,1,0,0,0,221,222,5,
  	114,0,0,222,223,5,101,0,0,223,224,5,116,0,0,224,225,5,117,0,0,225,226,
  	5,114,0,0,226,227,5,110,0,0,227,66,1,0,0,0,228,229,5,48,0,0,229,68,1,
  	0,0,0,230,234,3,71,35,0,231,233,3,73,36,0,232,231,1,0,0,0,233,236,1,0,
  	0,0,234,232,1,0,0,0,234,235,1,0,0,0,235,70,1,0,0,0,236,234,1,0,0,0,237,
  	238,2,49,57,0,238,72,1,0,0,0,239,242,3,67,33,0,240,242,3,71,35,0,241,
  	239,1,0,0,0,241,240,1,0,0,0,242,74,1,0,0,0,243,247,3,79,39,0,244,246,
  	3,77,38,0,245,244,1,0,0,0,246,249,1,0,0,0,247,245,1,0,0,0,247,248,1,0,
  	0,0,248,76,1,0,0,0,249,247,1,0,0,0,250,253,3,79,39,0,251,253,3,73,36,
  	0,252,250,1,0,0,0,252,251,1,0,0,0,253,78,1,0,0,0,254,257,3,81,40,0,255,
  	257,3,83,41,0,256,254,1,0,0,0,256,255,1,0,0,0,257,80,1,0,0,0,258,259,
  	2,97,122,0,259,82,1,0,0,0,260,261,2,65,90,0,261,84,1,0,0,0,262,264,7,
  	0,0,0,263,262,1,0,0,0,264,265,1,0,0,0,265,263,1,0,0,0,265,266,1,0,0,0,
  	266,267,1,0,0,0,267,268,6,42,0,0,268,86,1,0,0,0,269,270,5,47,0,0,270,
  	271,5,42,0,0,271,275,1,0,0,0,272,274,9,0,0,0,273,272,1,0,0,0,274,277,
  	1,0,0,0,275,276,1,0,0,0,275,273,1,0,0,0,276,278,1,0,0,0,277,275,1,0,0,
  	0,278,279,5,42,0,0,279,280,5,47,0,0,280,281,1,0,0,0,281,282,6,43,0,0,
  	282,88,1,0,0,0,283,284,5,47,0,0,284,285,5,47,0,0,285,289,1,0,0,0,286,
  	288,8,1,0,0,287,286,1,0,0,0,288,291,1,0,0,0,289,287,1,0,0,0,289,290,1,
  	0,0,0,290,292,1,0,0,0,291,289,1,0,0,0,292,293,6,44,0,0,293,90,1,0,0,0,
  	9,0,234,241,247,252,256,265,275,289,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  cintlexerLexerStaticData = staticData.release();
}

}

CINTLexer::CINTLexer(CharStream *input) : Lexer(input) {
  CINTLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *cintlexerLexerStaticData->atn, cintlexerLexerStaticData->decisionToDFA, cintlexerLexerStaticData->sharedContextCache);
}

CINTLexer::~CINTLexer() {
  delete _interpreter;
}

std::string CINTLexer::getGrammarFileName() const {
  return "CINT.g4";
}

const std::vector<std::string>& CINTLexer::getRuleNames() const {
  return cintlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& CINTLexer::getChannelNames() const {
  return cintlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& CINTLexer::getModeNames() const {
  return cintlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& CINTLexer::getVocabulary() const {
  return cintlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView CINTLexer::getSerializedATN() const {
  return cintlexerLexerStaticData->serializedATN;
}

const atn::ATN& CINTLexer::getATN() const {
  return *cintlexerLexerStaticData->atn;
}




void CINTLexer::initialize() {
  ::antlr4::internal::call_once(cintlexerLexerOnceFlag, cintlexerLexerInitialize);
}
